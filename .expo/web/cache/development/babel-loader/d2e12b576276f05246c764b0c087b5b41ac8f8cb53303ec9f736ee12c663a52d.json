{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar router = express.Router();\nvar StudyGroup = require('../models/StudyGroup');\nvar Subject = require('../models/Subject');\nvar auth = require('../auth');\nrouter.post('/create', auth.authenticateToken, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        name = _req$body.name,\n        subjectCode = _req$body.subjectCode;\n      var subject = yield Subject.findOne({\n        code: subjectCode\n      });\n      if (!subject) {\n        return res.status(404).json({\n          error: '해당 과목을 찾을 수 없습니다.'\n        });\n      }\n      var studyGroup = new StudyGroup({\n        name: name,\n        subject: subject._id,\n        createdBy: req.user.userId\n      });\n      studyGroup.participants.push(req.user.userId);\n      yield studyGroup.save();\n      res.status(201).json(studyGroup);\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/my-groups', auth.authenticateToken, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var studyGroups = yield StudyGroup.find({\n        participants: req.user.userId\n      }).populate('subject');\n      res.json(studyGroups);\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.post('/join', auth.authenticateToken, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var groupId = req.body.groupId;\n      var studyGroup = yield StudyGroup.findById(groupId);\n      if (!studyGroup) {\n        return res.status(404).json({\n          error: '스터디 그룹을 찾을 수 없습니다.'\n        });\n      }\n      if (!studyGroup.participants.includes(req.user.userId)) {\n        studyGroup.participants.push(req.user.userId);\n        yield studyGroup.save();\n      }\n      res.json({\n        message: '스터디 그룹에 참가하였습니다.',\n        studyGroup: studyGroup\n      });\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","StudyGroup","Subject","auth","post","authenticateToken","_ref","_asyncToGenerator","req","res","_req$body","body","name","subjectCode","subject","findOne","code","status","json","error","studyGroup","_id","createdBy","user","userId","participants","push","save","_x","_x2","apply","arguments","get","_ref2","studyGroups","find","populate","_x3","_x4","_ref3","groupId","findById","includes","message","_x5","_x6","module","exports"],"sources":["C:/startcoding/tutoring-platform/routes/studyGroupRoutes.js"],"sourcesContent":["\r\n// routes/studyGroupRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst StudyGroup = require('../models/StudyGroup');\r\nconst Subject = require('../models/Subject');\r\nconst auth = require('../auth');\r\n\r\n// 스터디 그룹 생성\r\n// router.post('/', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const { name, description, subject, maxMembers } = req.body;\r\n//     const studyGroup = new StudyGroup({\r\n//       name,\r\n//       description,\r\n//       subject,\r\n//       creator: req.user.userId,\r\n//       members: [req.user.userId],\r\n//       maxMembers\r\n//     });\r\n//     await studyGroup.save();\r\n//     res.status(201).json(studyGroup);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\nrouter.post('/create', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    const { name, subjectCode } = req.body;\r\n\r\n    const subject = await Subject.findOne({ code: subjectCode });\r\n    if (!subject) {\r\n      return res.status(404).json({ error: '해당 과목을 찾을 수 없습니다.' });\r\n    }\r\n\r\n    const studyGroup = new StudyGroup({\r\n      name,\r\n      subject: subject._id,\r\n      createdBy: req.user.userId\r\n    });\r\n\r\n    studyGroup.participants.push(req.user.userId);\r\n    await studyGroup.save();\r\n\r\n    res.status(201).json(studyGroup);\r\n  } catch (error) {\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n// router.post('/create', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//       const { name, subjectCode } = req.body;\r\n//       const studyGroup = new StudyGroup({ name, subjectCode, members: [req.user.userId] });\r\n//       await studyGroup.save();\r\n//       res.status(201).json(studyGroup);\r\n//   } catch (error) {\r\n//       res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\n// 모든 스터디 그룹 조회\r\n// router.get('/', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const studyGroups = await StudyGroup.find().populate('subject', 'name');\r\n//     res.json(studyGroups);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\n// 특정 스터디 그룹 조회\r\n// router.get('/:id', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const studyGroup = await StudyGroup.findById(req.params.id).populate('subject', 'name').populate('members', 'name');\r\n//     if (!studyGroup) return res.status(404).json({ error: '스터디 그룹을 찾을 수 없습니다' });\r\n//     res.json(studyGroup);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\nrouter.get('/my-groups', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    const studyGroups = await StudyGroup.find({ participants: req.user.userId }).populate('subject');\r\n    res.json(studyGroups);\r\n  } catch (error) {\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n// 스터디 그룹 참여\r\n// router.post('/:id/join', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const studyGroup = await StudyGroup.findById(req.params.id);\r\n//     if (!studyGroup) return res.status(404).json({ error: '스터디 그룹을 찾을 수 없습니다' });\r\n//     if (studyGroup.members.includes(req.user.userId)) return res.status(400).json({ error: '이미 참여 중인 그룹입니다' });\r\n//     if (studyGroup.members.length >= studyGroup.maxMembers) return res.status(400).json({ error: '그룹 인원이 가득 찼습니다' });\r\n    \r\n//     studyGroup.members.push(req.user.userId);\r\n//     await studyGroup.save();\r\n//     res.json(studyGroup);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\nrouter.post('/join', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    const { groupId } = req.body;\r\n\r\n    const studyGroup = await StudyGroup.findById(groupId);\r\n    if (!studyGroup) {\r\n      return res.status(404).json({ error: '스터디 그룹을 찾을 수 없습니다.' });\r\n    }\r\n\r\n    if (!studyGroup.participants.includes(req.user.userId)) {\r\n      studyGroup.participants.push(req.user.userId);\r\n      await studyGroup.save();\r\n    }\r\n\r\n    res.json({ message: '스터디 그룹에 참가하였습니다.', studyGroup });\r\n  } catch (error) {\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}