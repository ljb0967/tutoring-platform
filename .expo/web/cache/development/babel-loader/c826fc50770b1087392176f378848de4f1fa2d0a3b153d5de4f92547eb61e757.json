{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require(\"express\");\nvar router = express.Router();\nvar User = require(\"../models/User\");\nvar Subject = require('../models/Subject');\nvar auth = require(\"../auth\");\nrouter.post(\"/register\", auth.register);\nrouter.post(\"/login\", auth.login);\nrouter.get(\"/verify-email\", auth.verifyEmail);\nrouter.post('/enroll-subject', auth.authenticateToken, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var user = yield User.findById(req.user.userId);\n      user.enrolledSubjects.push(req.body.code);\n      yield user.save();\n      res.status(201).json(user.enrolledSubjects);\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/enroll-subjects', auth.authenticateToken, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var user = yield User.findById(req.user.userId);\n      res.json(user.enrolledSubjects);\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nrouter.get(\"/profile\", auth.authenticateToken, function () {\n  var _ref3 = _asyncToGenerator(function* (req, res) {\n    try {\n      var user = yield User.findById(req.user.userId).select(\"-password\");\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({\n        error: \"서버 오류\"\n      });\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nrouter.put('/profile', auth.authenticateToken, function () {\n  var _ref4 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        name = _req$body.name,\n        university = _req$body.university,\n        major = _req$body.major;\n      var user = yield User.findByIdAndUpdate(req.user.userId, {\n        name: name,\n        university: university,\n        major: major\n      }, {\n        new: true\n      }).select('-password');\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","User","Subject","auth","post","register","login","get","verifyEmail","authenticateToken","_ref","_asyncToGenerator","req","res","user","findById","userId","enrolledSubjects","push","body","code","save","status","json","error","_x","_x2","apply","arguments","_ref2","_x3","_x4","_ref3","select","_x5","_x6","put","_ref4","_req$body","name","university","major","findByIdAndUpdate","new","_x7","_x8","module","exports"],"sources":["C:/startcoding/tutoring-platform/routes/userRoutes.js"],"sourcesContent":["// const express = require(\"express\");\r\n// const router = express.Router();\r\n// const User = require(\"../models/User\");\r\n// const auth = require(\"../auth\");\r\n\r\n// router.post(\"/register\", auth.register);\r\n// router.post(\"/login\", auth.login);\r\n\r\n// router.get(\"/profile\", auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const user = await User.findById(req.user.userId).select(\"-password\");\r\n//     res.json(user);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: \"서버 오류\" });\r\n//   }\r\n// });\r\n\r\n// module.exports = router;\r\n\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst User = require(\"../models/User\");\r\nconst Subject = require('../models/Subject');\r\nconst auth = require(\"../auth\");\r\n\r\n// 사용자 등록 엔드포인트 (이메일 인증 포함)\r\nrouter.post(\"/register\", auth.register);\r\n\r\n// 사용자 로그인 엔드포인트\r\nrouter.post(\"/login\", auth.login);\r\n\r\n// 사용자 이메일 인증 엔드포인트\r\nrouter.get(\"/verify-email\", auth.verifyEmail);\r\n\r\n// 사용자가 자신의 프로필에 과목 추가\r\n// router.post('/enroll-subject', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const subject = await Subject.findOne({ code: req.body.code });\r\n//     if (!subject) {\r\n//       return res.status(404).json({ error: '과목을 찾을 수 없습니다.' });\r\n//     }\r\n\r\n//     const user = await User.findById(req.user.userId);\r\n//     if (!user.enrolledSubjects.includes(subject._id)) {\r\n//       user.enrolledSubjects.push(subject._id);\r\n//       await user.save();\r\n//     }\r\n\r\n//     res.json({ message: '과목이 추가되었습니다.', enrolledSubjects: user.enrolledSubjects });\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\n// 관심 과목 추가\r\nrouter.post('/enroll-subject', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n      const user = await User.findById(req.user.userId);\r\n      user.enrolledSubjects.push(req.body.code);\r\n      await user.save();\r\n      res.status(201).json(user.enrolledSubjects);\r\n  } catch (error) {\r\n      res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n// 관심 과목 목록 가져오기\r\nrouter.get('/enroll-subjects', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n      const user = await User.findById(req.user.userId);\r\n      res.json(user.enrolledSubjects);\r\n  } catch (error) {\r\n      res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n// 사용자 프로필 조회 엔드포인트 (토큰 인증 필요)\r\nrouter.get(\"/profile\", auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user.userId).select(\"-password\"); // 과목 정보와 함께 사용자 프로필 조회\r\n    res.json(user);\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"서버 오류\" });\r\n  }\r\n});\r\n\r\n// 사용자 프로필 업데이트하기\r\nrouter.put('/profile', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n      const { name, university, major } = req.body;\r\n      const user = await User.findByIdAndUpdate(\r\n          req.user.userId,\r\n          { name, university, major },\r\n          { new: true }\r\n      ).select('-password');\r\n      res.json(user);\r\n  } catch (error) {\r\n      res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}