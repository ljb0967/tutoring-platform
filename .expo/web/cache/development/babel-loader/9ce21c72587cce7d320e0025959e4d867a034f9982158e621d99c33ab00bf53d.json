{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar router = express.Router();\nvar Subject = require('../models/Subject');\nvar auth = require('../auth');\nrouter.post('/', auth.authenticateToken, function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var existingSubject = yield Subject.findOne({\n        code: req.body.code\n      });\n      if (existingSubject) {\n        return res.status(400).json({\n          error: '중복된 코드가 존재합니다.'\n        });\n      }\n      var subject = new Subject(req.body);\n      yield subject.save();\n      res.status(201).json(subject);\n    } catch (error) {\n      console.error('Error occurred while saving subject:', error);\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.get('/', auth.authenticateToken, function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      console.log('User university:', req.user.university);\n      var subjects = yield Subject.find({\n        university: req.user.university\n      });\n      console.log('Fetched Subjects:', subjects);\n      res.json(subjects);\n    } catch (error) {\n      console.error('Error fetching subjects:', error);\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","Subject","auth","post","authenticateToken","_ref","_asyncToGenerator","req","res","existingSubject","findOne","code","body","status","json","error","subject","save","console","_x","_x2","apply","arguments","get","_ref2","log","user","university","subjects","find","_x3","_x4","module","exports"],"sources":["C:/startcoding/tutoring-platform/routes/subjectRoutes.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst Subject = require('../models/Subject');\r\nconst auth = require('../auth');\r\n\r\n// router.post('/', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const subject = new Subject(req.body);\r\n//     await subject.save();\r\n//     res.status(201).json(subject);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\nrouter.post('/', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    // 중복 여부 확인\r\n    const existingSubject = await Subject.findOne({ code: req.body.code });\r\n    if (existingSubject) {\r\n      return res.status(400).json({ error: '중복된 코드가 존재합니다.' });\r\n    }\r\n\r\n    // 중복이 없으면 새로 저장\r\n    const subject = new Subject(req.body);\r\n    await subject.save();\r\n    res.status(201).json(subject);\r\n  } catch (error) {\r\n    console.error('Error occurred while saving subject:', error);\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n\r\n\r\n// router.get('/', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     const subjects = await Subject.find({ university: req.user.university });\r\n//     res.json(subjects);\r\n//   } catch (error) {\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\n// router.get('/', auth.authenticateToken, async (req, res) => {\r\n//   try {\r\n//     console.log('User Info:', req.user); // 사용자 정보 로그 출력\r\n//     const subjects = await Subject.find({ university: req.user.university });\r\n//     console.log('Fetched Subjects:', subjects); // 조회된 과목 로그 출력\r\n//     res.json(subjects);\r\n//   } catch (error) {\r\n//     console.error('Error fetching subjects:', error); // 오류 로그 출력\r\n//     res.status(500).json({ error: '서버 오류' });\r\n//   }\r\n// });\r\n\r\nrouter.get('/', auth.authenticateToken, async (req, res) => {\r\n  try {\r\n    console.log('User university:', req.user.university); // 로그 추가\r\n    const subjects = await Subject.find({ university: req.user.university });\r\n    console.log('Fetched Subjects:', subjects);\r\n    res.json(subjects);\r\n  } catch (error) {\r\n    console.error('Error fetching subjects:', error);\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n});\r\n\r\n\r\nmodule.exports = router;"],"mappings":";AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,IAAMC,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC5C,IAAMI,IAAI,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAY/BC,MAAM,CAACI,IAAI,CAAC,GAAG,EAAED,IAAI,CAACE,iBAAiB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,GAAG,EAAEC,GAAG,EAAK;IAC3D,IAAI;MAEF,IAAMC,eAAe,SAASR,OAAO,CAACS,OAAO,CAAC;QAAEC,IAAI,EAAEJ,GAAG,CAACK,IAAI,CAACD;MAAK,CAAC,CAAC;MACtE,IAAIF,eAAe,EAAE;QACnB,OAAOD,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAiB,CAAC,CAAC;MAC1D;MAGA,IAAMC,OAAO,GAAG,IAAIf,OAAO,CAACM,GAAG,CAACK,IAAI,CAAC;MACrC,MAAMI,OAAO,CAACC,IAAI,CAAC,CAAC;MACpBT,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACE,OAAO,CAAC;IAC/B,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAQ,CAAC,CAAC;IAC1C;EACF,CAAC;EAAA,iBAAAI,EAAA,EAAAC,GAAA;IAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAyBFvB,MAAM,CAACwB,GAAG,CAAC,GAAG,EAAErB,IAAI,CAACE,iBAAiB;EAAA,IAAAoB,KAAA,GAAAlB,iBAAA,CAAE,WAAOC,GAAG,EAAEC,GAAG,EAAK;IAC1D,IAAI;MACFU,OAAO,CAACO,GAAG,CAAC,kBAAkB,EAAElB,GAAG,CAACmB,IAAI,CAACC,UAAU,CAAC;MACpD,IAAMC,QAAQ,SAAS3B,OAAO,CAAC4B,IAAI,CAAC;QAAEF,UAAU,EAAEpB,GAAG,CAACmB,IAAI,CAACC;MAAW,CAAC,CAAC;MACxET,OAAO,CAACO,GAAG,CAAC,mBAAmB,EAAEG,QAAQ,CAAC;MAC1CpB,GAAG,CAACM,IAAI,CAACc,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAQ,CAAC,CAAC;IAC1C;EACF,CAAC;EAAA,iBAAAe,GAAA,EAAAC,GAAA;IAAA,OAAAP,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGFU,MAAM,CAACC,OAAO,GAAGlC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}