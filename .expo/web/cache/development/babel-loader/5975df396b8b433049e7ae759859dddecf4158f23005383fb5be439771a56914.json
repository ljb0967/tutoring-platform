{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar jwt = require('jsonwebtoken');\nvar bcrypt = require('bcrypt');\nvar User = require('./models/User');\nexports.register = function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body = req.body,\n        email = _req$body.email,\n        password = _req$body.password,\n        name = _req$body.name,\n        university = _req$body.university,\n        major = _req$body.major;\n      var hashedPassword = yield bcrypt.hash(password, 10);\n      var user = new User({\n        email: email,\n        password: hashedPassword,\n        name: name,\n        university: university,\n        major: major\n      });\n      yield user.save();\n      res.status(201).json({\n        message: '사용자 등록 성공'\n      });\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.login = function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    try {\n      var _req$body2 = req.body,\n        email = _req$body2.email,\n        password = _req$body2.password;\n      var user = yield User.findOne({\n        email: email\n      });\n      if (!user) return res.status(400).json({\n        error: '사용자를 찾을 수 없습니다'\n      });\n      var validPassword = yield bcrypt.compare(password, user.password);\n      if (!validPassword) return res.status(400).json({\n        error: '비밀번호가 올바르지 않습니다'\n      });\n      var token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET);\n      res.json({\n        token: token\n      });\n    } catch (error) {\n      res.status(500).json({\n        error: '서버 오류'\n      });\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexports.authenticateToken = function (req, res, next) {\n  var authHeader = req.headers['authorization'];\n  var token = authHeader && authHeader.split(' ')[1];\n  if (token == null) return res.sendStatus(401);\n  jwt.verify(token, process.env.JWT_SECRET, function (err, user) {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};","map":{"version":3,"names":["jwt","require","bcrypt","User","exports","register","_ref","_asyncToGenerator","req","res","_req$body","body","email","password","name","university","major","hashedPassword","hash","user","save","status","json","message","error","_x","_x2","apply","arguments","login","_ref2","_req$body2","findOne","validPassword","compare","token","sign","userId","_id","process","env","JWT_SECRET","_x3","_x4","authenticateToken","next","authHeader","headers","split","sendStatus","verify","err"],"sources":["C:/startcoding/tutoring-platform/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst User = require('./models/User');\r\n\r\nexports.register = async (req, res) => {\r\n  try {\r\n    const { email, password, name, university, major } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new User({ email, password: hashedPassword, name, university, major });\r\n    await user.save();\r\n    res.status(201).json({ message: '사용자 등록 성공' });\r\n  } catch (error) {\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ error: '사용자를 찾을 수 없습니다' });\r\n    \r\n    const validPassword = await bcrypt.compare(password, user.password);\r\n    if (!validPassword) return res.status(400).json({ error: '비밀번호가 올바르지 않습니다' });\r\n\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);\r\n    res.json({ token });\r\n  } catch (error) {\r\n    res.status(500).json({ error: '서버 오류' });\r\n  }\r\n};\r\n\r\nexports.authenticateToken = (req, res, next) => {\r\n  const authHeader = req.headers['authorization'];\r\n  const token = authHeader && authHeader.split(' ')[1];\r\n\r\n  if (token == null) return res.sendStatus(401);\r\n\r\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\r\n    if (err) return res.sendStatus(403);\r\n    req.user = user;\r\n    next();\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}