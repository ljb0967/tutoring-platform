{"ast":null,"code":"var cors = require('cors');\nvar express = require('express');\nvar mongoose = require('mongoose');\nrequire('dotenv').config();\nvar http = require('http');\nvar _require = require('socket.io'),\n  Server = _require.Server;\nvar path = require('path');\nvar userRoutes = require('./routes/userRoutes');\nvar subjectRoutes = require('./routes/subjectRoutes');\nvar studyGroupRoutes = require('./routes/studyGroupRoutes');\nvar scheduleRoutes = require('./routes/scheduleRoutes');\nvar reviewRoutes = require('./routes/reviewRoutes');\nvar app = express();\napp.use(express.json());\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(function () {\n  return console.log('Connected to MongoDB');\n}).catch(function (err) {\n  return console.error('Could not connect to MongoDB', err);\n});\napp.use(cors({\n  origin: 'http://localhost:3001',\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  credentials: true\n}));\napp.use('/api/users', userRoutes);\napp.use('/api/study-groups', studyGroupRoutes);\napp.use('/api/schedules', scheduleRoutes);\napp.use('/api/subjects', subjectRoutes);\napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/api/reviews', reviewRoutes);\nvar server = http.createServer(app);\nvar io = new Server(server, {\n  cors: {\n    origin: '*'\n  }\n});\nio.on('connection', function (socket) {\n  console.log('A user connected:', socket.id);\n  socket.on('chat message', function (msg) {\n    io.emit('chat message', msg);\n  });\n  socket.on('disconnect', function () {\n    console.log('User disconnected:', socket.id);\n  });\n});\nvar PORT = process.env.PORT || 3000;\nserver.listen(PORT, function () {\n  return console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["cors","require","express","mongoose","config","http","_require","Server","path","userRoutes","subjectRoutes","studyGroupRoutes","scheduleRoutes","reviewRoutes","app","use","json","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","origin","methods","credentials","static","join","__dirname","server","createServer","io","on","socket","id","msg","emit","PORT","listen"],"sources":["C:/startcoding/tutoring-platform/app.js"],"sourcesContent":["const cors = require('cors');\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\n\r\nconst http = require('http');\r\nconst { Server } = require('socket.io');\r\nconst path = require('path');\r\n\r\nconst userRoutes = require('./routes/userRoutes');\r\nconst subjectRoutes = require('./routes/subjectRoutes');\r\nconst studyGroupRoutes = require('./routes/studyGroupRoutes');\r\nconst scheduleRoutes = require('./routes/scheduleRoutes'); // 일정 관리 라우트 추가\r\nconst reviewRoutes = require('./routes/reviewRoutes');\r\n\r\n\r\nconst app = express();\r\napp.use(express.json());\r\n// app.use(express.json({ type: 'application/json; charset=utf-8' }));\r\n\r\n\r\n\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('Connected to MongoDB'))\r\n  .catch(err => console.error('Could not connect to MongoDB', err));\r\n\r\n// #################################################\r\n\r\n// const customerSchema = mongoose.Schema({\r\n//   name : \"string\",\r\n//     age : \"number\",\r\n//     gender : \"string\"\r\n// }, {\r\n//   collection : \"newCustomer\"\r\n// });\r\n\r\n// const Customer = mongoose.model(\"Customer\", customerSchema);\r\n\r\n// const customer1 = new Customer({ name: \"가나다\", age: 23, gender: \"남성\" });\r\n\r\n// customer1.save()\r\n//   .then(() => console.log(\"Customer saved\"))\r\n//   .catch(err => console.error(\"Error saving customer:\", err));\r\n\r\n// ###############################################################\r\n\r\napp.use(cors({\r\n  origin: 'http://localhost:3001', // 프론트엔드가 동작하는 주소를 명확히 지정\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE'], // 허용할 HTTP 메소드\r\n  credentials: true, // 쿠키를 포함한 요청 허용\r\n}));\r\napp.use('/api/users', userRoutes);\r\napp.use('/api/study-groups', studyGroupRoutes);\r\napp.use('/api/schedules', scheduleRoutes); // 일정 관리 라우트 추가\r\napp.use('/api/subjects', subjectRoutes);\r\napp.use(express.static(path.join(__dirname, 'public')));\r\napp.use('/api/reviews', reviewRoutes);\r\n\r\n// app.use(cors({\r\n//   origin: 'http://localhost:3001', // 리액트 앱이 실행되는 포트를 여기에 적어줍니다.\r\n//   credentials: true,\r\n// }));\r\n\r\n\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: '*',\r\n  }\r\n});\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('A user connected:', socket.id);\r\n\r\n  // 메시지 수신 및 브로드캐스트\r\n  socket.on('chat message', (msg) => {\r\n    io.emit('chat message', msg);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('User disconnected:', socket.id);\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n// app.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}